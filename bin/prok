#!/usr/bin/env node

/**
 * Module Dependencies
 */

var Command = require('commander').Command;
var exists = require('fs').existsSync;
var dirname = require('path').dirname;
var pkg = require('../package');
var join = require('path').join;
var stdout = process.stdout;
var stderr = process.stderr;
var Prok = require('..');

/**
 * Program
 */

var program = new Command('prok')
  .version(pkg.version)
  .usage('[options] [procfile]')
  .option('-c, --config <config>', 'specify a configuration', false)
  .option('-e, --env <file>', 'specify an environment configuration file', false)
  .option('-p, --procfile <file>', 'specify a Procfile', false)
  .option('-r, --root <dir>', 'specify a root directory', false)
  .parse(process.argv);

/**
 * CWD
 */

var cwd = program.root || process.cwd();

/**
 * Initialize `prok`
 */

var prok = Prok(cwd);
var processes;

/**
 * Load the procfile
 */

var procfile = program.procfile || program.args[0] || join(cwd, 'Procfile');
var config = program.procfile || program.args[0];

/**
 * Load the processes
 */

if (exists(procfile)) {
  prok.procfile(procfile);
} else if (processes = json(join(cwd, 'package.json')).processes) {
  if (!config && typeof processes.default !== 'object') prok.processes(processes);
  else prok.processes(processes[config || 'default']);
} else {
  console.error('  \033[31mError:\033[m cannot find Procfile or "processes" field in your package.json');
  program.outputHelp();
  process.exit(1);
}

/**
 * Load the environment
 */

var env = program.env ? program.env : join(dirname(procfile), '.env');
if (exists(procfile)) prok.env(env);

/**
 * Start the processes
 */

prok.start();

/**
 * Listen for SIGINT
 */

process.on('SIGINT', function() {
  prok.stop('SIGINT');
});

function json(path) {
  try {
    return require(path);
  } catch (e) {
    return {};
  }
}
